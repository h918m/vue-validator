;(function(){

/**
 * Require the given path.
 *
 * @param {String} path
 * @return {Object} exports
 * @api public
 */

function require(path, parent, orig) {
  var resolved = require.resolve(path);

  // lookup failed
  if (null == resolved) {
    orig = orig || path;
    parent = parent || 'root';
    var err = new Error('Failed to require "' + orig + '" from "' + parent + '"');
    err.path = orig;
    err.parent = parent;
    err.require = true;
    throw err;
  }

  var module = require.modules[resolved];

  // perform real require()
  // by invoking the module's
  // registered function
  if (!module._resolving && !module.exports) {
    var mod = {};
    mod.exports = {};
    mod.client = mod.component = true;
    module._resolving = true;
    module.call(this, mod.exports, require.relative(resolved), mod);
    delete module._resolving;
    module.exports = mod.exports;
  }

  return module.exports;
}

/**
 * Registered modules.
 */

require.modules = {};

/**
 * Registered aliases.
 */

require.aliases = {};

/**
 * Resolve `path`.
 *
 * Lookup:
 *
 *   - PATH/index.js
 *   - PATH.js
 *   - PATH
 *
 * @param {String} path
 * @return {String} path or null
 * @api private
 */

require.resolve = function(path) {
  if (path.charAt(0) === '/') path = path.slice(1);

  var paths = [
    path,
    path + '.js',
    path + '.json',
    path + '/index.js',
    path + '/index.json'
  ];

  for (var i = 0; i < paths.length; i++) {
    var path = paths[i];
    if (require.modules.hasOwnProperty(path)) return path;
    if (require.aliases.hasOwnProperty(path)) return require.aliases[path];
  }
};

/**
 * Normalize `path` relative to the current path.
 *
 * @param {String} curr
 * @param {String} path
 * @return {String}
 * @api private
 */

require.normalize = function(curr, path) {
  var segs = [];

  if ('.' != path.charAt(0)) return path;

  curr = curr.split('/');
  path = path.split('/');

  for (var i = 0; i < path.length; ++i) {
    if ('..' == path[i]) {
      curr.pop();
    } else if ('.' != path[i] && '' != path[i]) {
      segs.push(path[i]);
    }
  }

  return curr.concat(segs).join('/');
};

/**
 * Register module at `path` with callback `definition`.
 *
 * @param {String} path
 * @param {Function} definition
 * @api private
 */

require.register = function(path, definition) {
  require.modules[path] = definition;
};

/**
 * Alias a module definition.
 *
 * @param {String} from
 * @param {String} to
 * @api private
 */

require.alias = function(from, to) {
  if (!require.modules.hasOwnProperty(from)) {
    throw new Error('Failed to alias "' + from + '", it does not exist');
  }
  require.aliases[to] = from;
};

/**
 * Return a require function relative to the `parent` path.
 *
 * @param {String} parent
 * @return {Function}
 * @api private
 */

require.relative = function(parent) {
  var p = require.normalize(parent, '..');

  /**
   * lastIndexOf helper.
   */

  function lastIndexOf(arr, obj) {
    var i = arr.length;
    while (i--) {
      if (arr[i] === obj) return i;
    }
    return -1;
  }

  /**
   * The relative require() itself.
   */

  function localRequire(path) {
    var resolved = localRequire.resolve(path);
    return require(resolved, parent, path);
  }

  /**
   * Resolve relative to the parent.
   */

  localRequire.resolve = function(path) {
    var c = path.charAt(0);
    if ('/' == c) return path.slice(1);
    if ('.' == c) return require.normalize(p, path);

    // resolve deps by returning
    // the dep in the nearest "deps"
    // directory
    var segs = parent.split('/');
    var i = lastIndexOf(segs, 'deps') + 1;
    if (!i) i = 0;
    path = segs.slice(0, i + 1).join('/') + '/deps/' + path;
    return path;
  };

  /**
   * Check if module is defined at `path`.
   */

  localRequire.exists = function(path) {
    return require.modules.hasOwnProperty(localRequire.resolve(path));
  };

  return localRequire;
};
require.register("vue-validator/index.js", function(exports, require, module){
function validateRequired(e,i){try{this.$validation[[i,"required"].join(".")]=0===e.length}catch(n){console.error("required filter error:",n)}return e}function validatePattern(e){try{var i=arguments[arguments.length-1],n=arguments[1].replace(/^'/,"").replace(/'$/,""),t=n.match(/^\/(.*)\/([gim]*)$/);if(t){var r=new RegExp(t[1],t[2]);this.$validation[[i,"pattern"].join(".")]=!r.test(e)}}catch(a){console.error("pattern filter error:",a)}return e}function validateLength(e){try{for(var i=arguments[arguments.length-1],n=[i,"length","min"].join("."),t=[i,"length","max"].join("."),r={},a=1;a<arguments.length-1;a++){var l=arguments[a].split(":");2===l.length&&(isNaN(l[1])||(r[l[0]]=parseInt(l[1])))}"min"in r&&(this.$validation[n]=e.length<r.min),"max"in r&&(this.$validation[t]=e.length>r.max)}catch(o){console.error("length filter error:",o)}return e}function validateNumeric(e){try{for(var i=arguments[arguments.length-1],n=[i,"numeric","min"].join("."),t=[i,"numeric","max"].join("."),r=[i,"numeric","value"].join("."),a={},l=1;l<arguments.length-1;l++){var o=arguments[l].split(":");2===o.length&&(isNaN(o[1])||(a[o[0]]=parseInt(o[1])))}if(isNaN(e))this.$validation[r]=!0,"min"in a&&(this.$validation[n]=!1),"max"in a&&(this.$validation[t]=!1);else{this.$validation[r]=!1;var s=parseInt(e);"min"in a&&(this.$validation[n]=s<a.min),"max"in a&&(this.$validation[t]=s>a.max)}}catch(u){console.error("numeric filter error:",u)}return e}function validateCustom(e,i){try{var n=this.$options.methods[i];"function"==typeof n&&(e=n.call(this,e))}catch(t){console.error("custom filter error:",t)}return e}var slice=[].slice,hasOwn={}.hasOwnProperty;module.exports=function(e){function i(e,i,t,a,l){function s(i,n){var t=l[n]||new o(a,n);a.bindings[n]=l[n]=t,r(e,i,t)}for(var v,d,h=[],c=0;c<t.length;c++){var g=t[c].name;if("required"===g||"pattern"===g)v=[i,g].join("."),d=[u,i,g].join("."),s(v,d);else if("length"===g||"numeric"===g){h=n(t[c].args),"numeric"===g&&h.push("value");for(var m=0;m<h.length;m++)v=[i,g,h[m]].join("."),d=[u,i,g,h[m]].join("."),s(v,d)}else"validator"===g&&(v=[i,g,t[c].args[0]].join("."),d=[u,i,g,t[c].args[0]].join("."),s(v,d))}}function n(e){for(var i=[],n=0;n<e.length;n++){var t=e[n],r=t.split(":");2===r.length&&i.push(r[0])}return i}function t(e,i,n){for(var t=[i],r="",l=0;l<n.length;l++){var o=n[l].name;t.push(n[l].args?[o].concat(n[l].args).concat([i]).join(" "):o+" "+i)}return r=t.join("|"),a.log("makeFilterExpression: "+r),r}function r(e,i,n){var t=e.__emitter__;hasOwn.call(e,i)||(e[i]=void 0),t&&!hasOwn.call(t.values,i)&&s.convertKey(e,i),n.value=e[i]}var a=e.require("utils"),l=e.require("directive"),o=e.require("binding"),s=e.require("observer"),u="$validation",v=u.split("$")[1],d="$valid";e.filter("required",validateRequired),e.filter("pattern",validatePattern),e.filter("length",validateLength),e.filter("numeric",validateNumeric),e.filter("validator",validateCustom),e.directive("validate",{bind:function(){function e(n){1===n.nodeType&&"SCRIPT"!==n.tagName&&n.hasChildNodes()&&slice.call(n.childNodes).forEach(function(n){if(1===n.nodeType)if(n.hasChildNodes())e(n);else{var o=n.tagName;if(("INPUT"===o||"SELECT"===o||"TEXTAREA"===o)&&n.hasAttributes)for(var s=slice.call(n.attributes),u=0;u<s.length;u++){var v=s[u];if("v-model"===v.name){var d=l.parse(v.value),h=d[0].key,c=d[0].filters;c&&(i(a,h,c,r,m),v.value=t(a,h,c))}}}})}function n(){var e=!0;for(var i in a)if(a[i]){e=!1;break}f.update(e)}var r=this.compiler,a=r[v]||{},h=this.el,c=this.vm,g=r.observer,m=this.validationBindings={};c[u]=r[v]=a,s.observe(a,u,r.observer),r.bindings[u]=new o(r,u),m[u]=r.bindings[u],e(h);var f=r.bindings[d]=new o(r,d);m[d]=f,Object.defineProperty(c,d,{enumerable:!0,configurable:!0,get:function(){return g.emit("get",d),f.value}}),this._handleValid=function(e){u!==e&&d!==e&&e in m&&n()},g.on("set",this._handleValid)},unbind:function(){var e=this.compiler,i=this.vm,n=e.observer,t=e[v],r=this.validationBindings,a=e.bindings;n.off(this._handleValid),delete this._handleValid,delete i[d];for(var l in r){var o=a[l];o&&(o.unbind(),delete a[l]),r[l]=null}delete this.validationBindings,s.unobserve(t,u,e.observer),delete e[v],delete i[u]}})};
});if (typeof exports == "object") {
  module.exports = require("vue-validator");
} else if (typeof define == "function" && define.amd) {
  define([], function(){ return require("vue-validator"); });
} else {
  this["vue-validator"] = require("vue-validator");
}})();